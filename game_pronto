"""*******************************************************************************
Sistema operacional: Windows 10
Versão Python: 3.11.5 (64-bit)
Autor: João Marcelo Nascimento Fernandes
Componente Curricular: Algoritmos I
Concluido em: 04/10/2023
Declaro que este código foi elaborado por mim de forma individual e não contém nenhum
trecho de código de outro colega ou de outro autor, tais como provindos de livros e
apostilas, e páginas ou documentos eletrônicos da Internet. Qualquer trecho de código
de outra autoria que não a minha está destacado com uma citação para o autor e a fonte
do código, e estou ciente que estes trechos não serão considerados para fins de avaliação.
******************************************************************************************"""

#Importação da biblioteca random:
import random

#Declaração de varíaveis a seguir:
play = score = high_score = last_score = quant_jogadas = record_jogadas = 0

#Função que gera a matriz base do programa:
def gerarMatriz():
    matriz = []
    for l in range(0, 4):
        linha = []
        for c in range (0, 4):
            linha.append(0)
        matriz.append(linha)
    return matriz

#Função que inicia o jogo, gerando dois valores em posições aleatórias na matriz:
def startGame(matriz):
    spawn = 0
    while spawn < 2:
        l = random.randint(0, 3)
        c = random.randint(0, 3) 
        if matriz[l][c] == 0:
            spawn += 1
            matriz[l][c] = random.choice([2, 4])
    return matriz

#Função que exibe a matriz:
def exibirMatriz(matriz):
    for l in range(0, 4):
        for c in range(0, 4):
            if matriz[l][c] == 1024 or matriz[l][c] == 2048:
                print(f'|{matriz[l][c]:^4}|', end='')
            else:
                print(f'|{matriz[l][c]:^4}|'.replace('0', ' '), end='')
        print()

#Função que salva a matriz para compara-la com ela mesma após o movimento:
def matrizParaComparacao(matriz):
    matriz_salva = []
    for l in matriz:
        linha = []
        for c in l:
            linha.append(c)
        matriz_salva.append(linha)
    return matriz_salva

#Função que gera um novo valor após cada jogada em uma posição vazia aleatória:
def spawnCasas(matriz):
    spawn = 0
    while spawn == 0:
        l = random.randint(0, 3)
        c = random.randint(0, 3) 
        if matriz[l][c] == 0:
            spawn += 1
            matriz[l][c] = random.choice([2, 4])
        else:
            spawn += 0
    return matriz

#Função que realiza a movimentação e a soma para todas as direções:
def movimentoSoma(entrada):
    global score
    if entrada == 'W':
        for l in range(0, 4):
            for c in range(0, 4):
                if matriz[0][c] == 0:
                    matriz[0][c] = matriz[1][c]
                    matriz[1][c] = 0
                if matriz[1][c] == 0:
                    matriz[1][c] = matriz[2][c]
                    matriz[2][c] = 0
                if matriz[2][c] == 0:
                    matriz[2][c] = matriz[3][c]
                    matriz[3][c] = 0
        for c in range(0, 4):
            if matriz[0][c] == matriz[1][c]:
                s1_cima = matriz[0][c] + matriz[1][c]
                matriz[0][c] = s1_cima
                matriz[1][c] = 0
                score += s1_cima
            if matriz[1][c] == matriz[2][c]:
                s2_cima = matriz[1][c] + matriz[2][c]
                matriz[1][c] = s2_cima
                matriz[2][c] = 0
                score += s2_cima
            if matriz[2][c] == matriz[3][c]:
                s3_cima = matriz[2][c] + matriz[3][c]
                matriz[2][c] = s3_cima
                matriz[3][c] = 0
                score += s3_cima
        for l in range(0, 4):
            for c in range(0, 4):
                if matriz[0][c] == 0:
                    matriz[0][c] = matriz[1][c]
                    matriz[1][c] = 0
                if matriz[1][c] == 0:
                    matriz[1][c] = matriz[2][c]
                    matriz[2][c] = 0
                if matriz[2][c] == 0:
                    matriz[2][c] = matriz[3][c]
                    matriz[3][c] = 0
        return matriz
    elif entrada == 'S':
        for l in range(0, 4):
            for c in range(0, 4):
                if matriz[3][c] == 0:
                    matriz[3][c] = matriz[2][c]
                    matriz[2][c] = 0
                if matriz[2][c] == 0:
                    matriz[2][c] = matriz[1][c]
                    matriz[1][c] = 0
                if matriz[1][c] == 0:
                    matriz[1][c] = matriz[0][c]
                    matriz[0][c] = 0
        for c in range(0, 4):
            if matriz[3][c] == matriz[2][c]:
                s1_baixo = matriz[3][c] + matriz[2][c]
                matriz[3][c] = s1_baixo
                matriz[2][c] = 0
                score += s1_baixo
            if matriz[2][c] == matriz[1][c]:
                s2_baixo = matriz[2][c] + matriz[1][c]
                matriz[2][c] = s2_baixo
                matriz[1][c] = 0
                score += s2_baixo
            if matriz[1][c] == matriz[0][c]:
                s3_baixo = matriz[1][c] + matriz[0][c]
                matriz[1][c] = s3_baixo
                matriz[0][c] = 0
                score += s3_baixo
        for l in range(0, 4):
            for c in range(0, 4):
                if matriz[3][c] == 0:
                    matriz[3][c] = matriz[2][c]
                    matriz[2][c] = 0
                if matriz[2][c] == 0:
                    matriz[2][c] = matriz[1][c]
                    matriz[1][c] = 0
                if matriz[1][c] == 0:
                    matriz[1][c] = matriz[0][c]
                    matriz[0][c] = 0
        return matriz
    elif entrada == 'D':
        for l in range(0, 4):
            for c in range(0, 4):
                if matriz[l][3] == 0:
                    matriz[l][3] = matriz[l][2]
                    matriz[l][2] = 0
                if matriz[l][2] == 0:
                    matriz[l][2] = matriz[l][1]
                    matriz[l][1] = 0
                if matriz[l][1] == 0:
                    matriz[l][1] = matriz[l][0]
                    matriz[l][0] = 0
        for l in range(0, 4):
            if matriz[l][3] == matriz[l][2]:
                s1_dir = matriz[l][3] + matriz[l][2]
                matriz[l][3] = s1_dir
                matriz[l][2] = 0
                score += s1_dir
            if matriz[l][2] == matriz[l][1]:
                s2_dir = matriz[l][2] + matriz[l][1]
                matriz[l][2] = s2_dir
                matriz[l][1] = 0
                score += s2_dir
            if matriz[l][1] == matriz[l][0]:
                s3_dir = matriz[l][1] + matriz[l][0]
                matriz[l][1] = s3_dir
                matriz[l][0] = 0
                score += s3_dir
        for l in range(0, 4):
            for c in range(0, 4):
                if matriz[l][3] == 0:
                    matriz[l][3] = matriz[l][2]
                    matriz[l][2] = 0
                if matriz[l][2] == 0:
                    matriz[l][2] = matriz[l][1]
                    matriz[l][1] = 0
                if matriz[l][1] == 0:
                    matriz[l][1] = matriz[l][0]
                    matriz[l][0] = 0
        return matriz
    elif entrada == 'A':
        for l in range(0, 4):
            for c in range(0, 4):
                if matriz[l][0] == 0:
                    matriz[l][0] = matriz[l][1]
                    matriz[l][1] = 0
                if matriz[l][1] == 0:
                    matriz[l][1] = matriz[l][2]
                    matriz[l][2] = 0
                if matriz[l][2] == 0:
                    matriz[l][2] = matriz[l][3]
                    matriz[l][3] = 0
        for l in range(0, 4):
            if matriz[l][0] == matriz[l][1]:
                s1_esq = matriz[l][0] + matriz[l][1]
                matriz[l][0] = s1_esq
                matriz[l][1] = 0
                score += s1_esq
            if matriz[l][1] == matriz[l][2]:
                s2_esq = matriz[l][1] + matriz[l][2]
                matriz[l][1] = s2_esq
                matriz[l][2] = 0
                score += s2_esq
            if matriz[l][2] == matriz[l][3]:
                s3_esq = matriz[l][2] + matriz[l][3]
                matriz[l][2] = s3_esq
                matriz[l][3] = 0
                score += s3_esq
        for l in range(0, 4):
            for c in range(0, 4):
                if matriz[l][0] == 0:
                    matriz[l][0] = matriz[l][1]
                    matriz[l][1] = 0
                if matriz[l][1] == 0:
                    matriz[l][1] = matriz[l][2]
                    matriz[l][2] = 0
                if matriz[l][2] == 0:
                    matriz[l][2] = matriz[l][3]
                    matriz[l][3] = 0
        return matriz
    else:
        return

#Função que verifica se há jogadas possíveis:
def verifJogadas(matriz):
    for l in range(0, 4):
        for c in range(0, 4):
            if matriz[l][c] == 0:
                return True
    for l in range(0, 4):
        if matriz[l][0] == matriz[l][1] or matriz[l][1] == matriz[l][2] or matriz[l][2] == matriz[l][3]:
            return True
    for c in range(0, 4):
        if matriz[0][c] == matriz[1][c] or matriz[1][c] == matriz[2][c] or matriz[2][c] == matriz[3][c]:
            return True
    return False

#Programa principal:
input('''| 4  || 2  ||    ||    |
| 8  || 4  ||    ||    |
| 32 || 8  || 4  ||    |
| 64 || 32 || 8  || 4  |
Use W/A/S/D para jogar
Aperte qualquer tecla para iniciar\n''')
matriz = gerarMatriz()
startGame(matriz)
#Loop do programa principal:
while play == 0:
    exibirMatriz(matriz)
    #Contabilização da pontuação
    if score > high_score or (score == high_score and quant_jogadas <= record_jogadas):
        high_score = score
        record_jogadas = quant_jogadas
    print(f'Score: {score}  Jogadas: {quant_jogadas} \nHigh Score: {high_score}  Jogadas: {record_jogadas} \nLast Score: {last_score}\n')
    matriz_anterior = matrizParaComparacao(matriz)
    entrada = input('Digite: ').upper().strip()
    movimentoSoma(entrada)
    matriz_movimentada = matrizParaComparacao(matriz)
    if matriz_anterior != matriz_movimentada:
        spawnCasas(matriz)
        quant_jogadas += 1
    #Fim de jogo com vitória:
    for l in range(0, 4):
        for c in range(0, 4):
            if matriz[l][c] == 2048:
                exibirMatriz(matriz)
                if score > high_score or (score == high_score and quant_jogadas <= record_jogadas):
                    high_score = score
                    record_jogadas = quant_jogadas
                print(f'VOCÊ VENCEU!!! \nScore: {score}  Jogadas: {quant_jogadas} \nHigh Score: {high_score}  Jogadas: {record_jogadas}')
                restart = input('Digite 1 para jogar novamente: ')
                #Reinício do jogo 1:
                if restart == '1':
                    matriz = gerarMatriz()
                    startGame(matriz)
                    last_score = score
                    score = 0
                    quant_jogadas = 0
                #Saída do loop 1:
                else:
                    print('Jogo encerrado')
                    play +=1
    if verifJogadas(matriz):
        continue
    #Fim de jogo com derrota:
    else:
        exibirMatriz(matriz)
        if score > high_score or (score == high_score and quant_jogadas <= record_jogadas):
            high_score = score
            record_jogadas = quant_jogadas
        print(f'Você perdeu \nScore: {score}  Jogadas: {quant_jogadas} \nHigh Score: {high_score}  Jogadas: {record_jogadas}')
        restart = input('Digite 1 para jogar novamente: ')
        #Reinicio do jogo 2:
        if restart == '1':
            matriz = gerarMatriz()
            startGame(matriz)
            last_score = score
            score = 0
            quant_jogadas = 0
        #Saída do loop 2:
        else:
            print('Jogo encerrado')
            play +=1

#Fim de código
